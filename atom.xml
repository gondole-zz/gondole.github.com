<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Gondole's Blog]]></title>
  <subtitle><![CDATA[镜花水月]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://gondole.github.io/"/>
  <updated>2016-04-20T01:08:13.156Z</updated>
  <id>http://gondole.github.io/</id>
  
  <author>
    <name><![CDATA[Gondole]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Android之Gradle漫游]]></title>
    <link href="http://gondole.github.io/2016/04/19/Android%E4%B9%8BGradle%E6%BC%AB%E6%B8%B8/"/>
    <id>http://gondole.github.io/2016/04/19/Android之Gradle漫游/</id>
    <published>2016-04-19T08:39:41.000Z</published>
    <updated>2016-04-20T01:08:13.156Z</updated>
    <content type="html"><![CDATA[<h1 id="u591A_u6E20_u9053_u6253_u5305"><a href="#u591A_u6E20_u9053_u6253_u5305" class="headerlink" title="多渠道打包"></a>多渠道打包</h1><p>Eclipse时代，结合ant也是可以进行多渠道打包的，可惜效率以及便捷性上面比现今的Gradle差了许多，Gradle通过可配置的方式来进行多渠道打包，可配置的元素有很多，例如：包名、资源、代码、版本号等等，灵活性很大，也很节省时间，常规方式默认打包构建时会生成各个渠道对应的代码和资源文件，然后逐个进行打包，这样子渠道很多时也是相对费时间的，也很耗费电脑性能。此外有一些方案，比如美团之前提到的多渠道打包，首个APK完整构建后，其他的会根据首个构建好的APK进行资源和代码的替换来生成新的渠道包，以这种方式来操作，100个渠道包也不需要太多时间的，后续会对该种方式进行补充记录。</p>
<p>下面记录一下实际操作用到的一些配置，打多渠道包一般分为两步：</p>
<ul>
<li>配置渠道</li>
<li>配置渠道特有的信息</li>
</ul>
<a id="more"></a>
<h2 id="u914D_u7F6E_u6E20_u9053"><a href="#u914D_u7F6E_u6E20_u9053" class="headerlink" title="配置渠道"></a>配置渠道</h2><p>在module的build.gradle进行各个渠道的声明：  </p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">   ...</span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        wandoujia &#123;&#125;</span><br><span class="line">        qihu360 &#123;&#125;</span><br><span class="line">        baidu &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u6E20_u9053_u7279_u6709_u4FE1_u606F_u914D_u7F6E"><a href="#u6E20_u9053_u7279_u6709_u4FE1_u606F_u914D_u7F6E" class="headerlink" title="渠道特有信息配置"></a>渠道特有信息配置</h2><p>eg.友盟的渠道配置一般写到manifest.xml里</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">meta-data</span></span><br><span class="line">	<span class="attribute">android:name</span>=<span class="value">"UMENG_CHANNEL"</span></span><br><span class="line">	<span class="attribute">android:value</span>=<span class="value">"$&#123;CHANNEL_VALUE&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>占位符在build.gradle里各个渠道声明处进行信息配置，defaultConfig也可以配置默认值</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//渠道列表</span></span><br><span class="line">productFlavors &#123;</span><br><span class="line">    wandoujia &#123;</span><br><span class="line">        <span class="comment">//包名</span></span><br><span class="line">		applicationId <span class="string">"com.example.wandoujia"</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//动态配置字符串</span></span><br><span class="line">		resValue <span class="string">"string"</span>, <span class="string">"app_name"</span>, <span class="string">"豌豆荚专用"</span>  </span><br><span class="line">		</span><br><span class="line">		<span class="comment">//动态配置字符串到buildConfig类里方便在代码里引用            </span></span><br><span class="line">		buildConfigField <span class="string">'String'</span>,<span class="string">'URI_JPUSH_HISTORY'</span>,<span class="string">'"xxx"'</span></span><br><span class="line">            </span><br><span class="line">		<span class="comment">//对占位符进行赋值，支持多个</span></span><br><span class="line">		manifestPlaceholders = [</span><br><span class="line"><span class="label">				JPUSH_APPKEY_VALUE:</span> <span class="string">"xxx"</span>,</span><br><span class="line"><span class="label">				JPushHistoryContentProvider_VALUE:</span> <span class="string">"xxx"</span>,</span><br><span class="line"><span class="label">				JPUSH_REVEIVER_CATEGORY_VALUE:</span> <span class="string">"xxx"</span>,</span><br><span class="line"><span class="label">				JPUSH_PERMISSION_VALUE:</span> <span class="string">"xxx"</span>,</span><br><span class="line"><span class="label">				APPKEY_VALUE:</span> <span class="string">"xx"</span>,</span><br><span class="line"><span class="label">				UMENG_APPKEY_VALUE:</span> <span class="string">"xxx"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定渠道名 flavor的name eg.wandoujia</span></span><br><span class="line">productFlavors.all &#123;</span><br><span class="line">    flavor -&gt; flavor.manifestPlaceholders = [<span class="string">UMENG_CHANNEL_VALUE:</span> name]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>defaultConfig配置的清单文件（AndroidManifest.xml）的一些设置。defaultConfig的配置将覆盖AndroidManifest.xml中的设置。<br>defaultConfig元素指定的配置适用于所有的版本(build variants)，除非一个build variants的配置将覆盖一些值。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">defaultConfig &#123;</span><br><span class="line">    minSdkVersion <span class="number">8</span></span><br><span class="line">    targetSdkVersion <span class="number">22</span></span><br><span class="line">    versionCode <span class="number">10</span></span><br><span class="line">    versionName <span class="string">"3.0"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// dex突破65535的限制</span></span><br><span class="line">    multiDexEnabled <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    applicationId <span class="string">"com.cdel.chinaacc.exam.bank"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外如果有一些渠道有特有的逻辑代码和资源也是可以配置的。在src/main 这里，main表示程序构建默认使用的代码和资源，我们可以在main同级目录建立和渠道名相同名字的文件夹，eg.src/wandoujia，下面的子目录需要和main下的结构一样，比如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">src/wandoujia</span><br><span class="line">	/assets</span><br><span class="line">	/res</span><br><span class="line">		/drawable</span><br><span class="line">		/drawable-xhdpi</span><br><span class="line">		/values</span><br><span class="line">			/strings.xml</span><br><span class="line">src/main</span><br></pre></td></tr></table></figure>
<p>这样在多渠道打包自动构建时，相应的渠道会自动到相应目录下使用渠道包自己的代码和资源来进行打包，有几个原则是：</p>
<ul>
<li>代码和资源文件进行替换</li>
<li>字符串相关文件进行合并追加</li>
</ul>
<p>这样一来，多渠道打包就变得灵活很多。</p>
<h1 id="u5F00_u53D1_u914D_u7F6E_u76F8_u5173"><a href="#u5F00_u53D1_u914D_u7F6E_u76F8_u5173" class="headerlink" title="开发配置相关"></a>开发配置相关</h1><h2 id="u4FDD_u6301_u65E7_u7684eclipse_u6587_u4EF6_u7ED3_u6784"><a href="#u4FDD_u6301_u65E7_u7684eclipse_u6587_u4EF6_u7ED3_u6784" class="headerlink" title="保持旧的eclipse文件结构"></a>保持旧的eclipse文件结构</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">     sourceSets &#123;</span><br><span class="line">       main &#123;</span><br><span class="line">         manifest.srcFile <span class="string">'AndroidManifest.xml'</span></span><br><span class="line">         java.srcDirs = [<span class="string">'src'</span>]</span><br><span class="line">         resources.srcDirs = [<span class="string">'src'</span>]</span><br><span class="line">         aidl.srcDirs = [<span class="string">'src'</span>]</span><br><span class="line">         renderscript.srcDirs = [<span class="string">'src'</span>]</span><br><span class="line">         res.srcDirs = [<span class="string">'res'</span>]</span><br><span class="line">         assets.srcDirs = [<span class="string">'assets'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">     androidTest.setRoot(<span class="string">'tests'</span>)</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在grade文件中配置，将会保存eclipse目录结构，当然，如果你有任何依赖的jar包，你需要告诉gradle它在哪儿，假设jar包会在一个叫做libs的文件夹内，那么你应该这么配置：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">       compile fileTree(<span class="string">dir:</span> <span class="string">'libs'</span>, <span class="string">include:</span> [<span class="string">'*.jar'</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该行意为：将libs文件夹中所有的jar文件视为依赖包。</p>
<h2 id="Android-Gradle_DSL"><a href="#Android-Gradle_DSL" class="headerlink" title="Android-Gradle DSL"></a>Android-Gradle DSL</h2><p>defaultConfig{ } 默认配置，是ProductFlavor类型。它共享给其他ProductFlavor使用<br>sourceSets{ } 源文件目录设置，是AndroidSourceSet类型。<br>buildTypes{ } BuildType类型<br>signingConfigs{ } 签名配置，SigningConfig类型<br>productFlavors{ } 产品风格配置，ProductFlavor类型<br>testOptions{ } 测试配置，TestOptions类型<br>aaptOptions{ } aapt配置，AaptOptions类型<br>lintOptions{ } lint配置，LintOptions类型<br>dexOptions{ } dex配置，DexOptions类型<br>compileOptions{ } 编译配置，CompileOptions类型<br>packagingOptions{ } PackagingOptions类型<br>jacoco{ } JacocoExtension类型。 用于设定 jacoco版本<br>splits{ } Splits类型。 </p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u591A_u6E20_u9053_u6253_u5305"><a href="#u591A_u6E20_u9053_u6253_u5305" class="headerlink" title="多渠道打包"></a>多渠道打包</h1><p>Eclipse时代，结合ant也是可以进行多渠道打包的，可惜效率以及便捷性上面比现今的Gradle差了许多，Gradle通过可配置的方式来进行多渠道打包，可配置的元素有很多，例如：包名、资源、代码、版本号等等，灵活性很大，也很节省时间，常规方式默认打包构建时会生成各个渠道对应的代码和资源文件，然后逐个进行打包，这样子渠道很多时也是相对费时间的，也很耗费电脑性能。此外有一些方案，比如美团之前提到的多渠道打包，首个APK完整构建后，其他的会根据首个构建好的APK进行资源和代码的替换来生成新的渠道包，以这种方式来操作，100个渠道包也不需要太多时间的，后续会对该种方式进行补充记录。</p>
<p>下面记录一下实际操作用到的一些配置，打多渠道包一般分为两步：</p>
<ul>
<li>配置渠道</li>
<li>配置渠道特有的信息</li>
</ul>]]>
    
    </summary>
    
      <category term="Android" scheme="http://gondole.github.io/tags/Android/"/>
    
      <category term="Gradle" scheme="http://gondole.github.io/tags/Gradle/"/>
    
      <category term="多渠道打包" scheme="http://gondole.github.io/tags/%E5%A4%9A%E6%B8%A0%E9%81%93%E6%89%93%E5%8C%85/"/>
    
      <category term="Android" scheme="http://gondole.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android源码相关]]></title>
    <link href="http://gondole.github.io/2016/03/24/Android%E6%BA%90%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
    <id>http://gondole.github.io/2016/03/24/Android源码相关/</id>
    <published>2016-03-24T05:55:32.000Z</published>
    <updated>2016-03-25T03:47:26.871Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xqdqt.com1.z0.glb.clouddn.com/2016%2F03%2F24%2Fwallhaven-329431.jpg" alt=""></p>
<h2 id="SDK_u81EA_u5E26_u6E90_u7801_u76F8_u5173"><a href="#SDK_u81EA_u5E26_u6E90_u7801_u76F8_u5173" class="headerlink" title="SDK自带源码相关"></a>SDK自带源码相关</h2><p>在开发工具里都可以关联到SDK自带的Source源码，Eclipse和Android Studio方式大概相同，大部分的API都可以找到，少部分的API可能出于安全原因，在Source源码里并不能找到，可以到AOSP里去寻找更详细的源码，这些隐藏的API方法也可以通过反射的方式来进行调用。</p>
<h2 id="AOSP"><a href="#AOSP" class="headerlink" title="AOSP"></a>AOSP</h2><p><a href="https://android.googlesource.com/" target="_blank" rel="external">AOSP</a> 包含了Google开源的很多源码，过于庞大，对于一般开发者来说，我们只需要接触Framework层次的东西就够了，这里包括了base、build-tools、support包甚至Volley项目的源码。</p>
<a id="more"></a>
<h2 id="u5F00_u59CB_u9605_u8BFB"><a href="#u5F00_u59CB_u9605_u8BFB" class="headerlink" title="开始阅读"></a>开始阅读</h2><ol>
<li>Handler-Message-Looper</li>
<li>Activity和Service</li>
<li>Fragment</li>
<li>View</li>
<li>MotionEvent</li>
<li>LayoutInflator</li>
<li>SurfaceView和TextureView</li>
<li>AsyncTask</li>
<li>Volley</li>
<li>android.util.*</li>
</ol>
<h2 id="u8FDB_u9636_u9605_u8BFB"><a href="#u8FDB_u9636_u9605_u8BFB" class="headerlink" title="进阶阅读"></a>进阶阅读</h2><ol>
<li>Context</li>
<li>ClassLoader</li>
<li>Binder</li>
<li>WMS，AMS，PMS，NMS，IMS等系统Service</li>
</ol>
<h2 id="u5F00_u6E90_u9879_u76EE"><a href="#u5F00_u6E90_u9879_u76EE" class="headerlink" title="开源项目"></a>开源项目</h2><ol>
<li>EventBus、OTTO （事件总线）</li>
<li>Volley (网络请求)</li>
<li>RxJava （异步）</li>
<li>Guava （核心基础类库）</li>
</ol>
<h2 id="u4E00_u4E9B_u5927_u795E_u548C_u8D44_u6E90"><a href="#u4E00_u4E9B_u5927_u795E_u548C_u8D44_u6E90" class="headerlink" title="一些大神和资源"></a>一些大神和资源</h2><ol>
<li><a href="https://source.android.com/source/index.html" target="_blank" rel="external">AOSP官方的介绍</a></li>
<li><a href="https://developer.android.com/training/index.html" target="_blank" rel="external">官方教程</a>、<a href="http://android-developers.blogspot.sg/" target="_blank" rel="external">官方博客</a></li>
<li><a href="http://blog.csdn.net/luoshengyang" target="_blank" rel="external">老罗的Android之旅</a></li>
<li><a href="http://blog.csdn.net/innost" target="_blank" rel="external">Innost的专栏</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xqdqt.com1.z0.glb.clouddn.com/2016%2F03%2F24%2Fwallhaven-329431.jpg" alt=""></p>
<h2 id="SDK_u81EA_u5E26_u6E90_u7801_u76F8_u5173"><a href="#SDK_u81EA_u5E26_u6E90_u7801_u76F8_u5173" class="headerlink" title="SDK自带源码相关"></a>SDK自带源码相关</h2><p>在开发工具里都可以关联到SDK自带的Source源码，Eclipse和Android Studio方式大概相同，大部分的API都可以找到，少部分的API可能出于安全原因，在Source源码里并不能找到，可以到AOSP里去寻找更详细的源码，这些隐藏的API方法也可以通过反射的方式来进行调用。</p>
<h2 id="AOSP"><a href="#AOSP" class="headerlink" title="AOSP"></a>AOSP</h2><p><a href="https://android.googlesource.com/">AOSP</a> 包含了Google开源的很多源码，过于庞大，对于一般开发者来说，我们只需要接触Framework层次的东西就够了，这里包括了base、build-tools、support包甚至Volley项目的源码。</p>]]>
    
    </summary>
    
      <category term="Android" scheme="http://gondole.github.io/tags/Android/"/>
    
      <category term="源码" scheme="http://gondole.github.io/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="Android" scheme="http://gondole.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[申请个人域名记录]]></title>
    <link href="http://gondole.github.io/2016/02/22/%E7%94%B3%E8%AF%B7%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D%E8%AE%B0%E5%BD%95/"/>
    <id>http://gondole.github.io/2016/02/22/申请个人域名记录/</id>
    <published>2016-02-22T01:41:01.000Z</published>
    <updated>2016-02-23T03:48:44.105Z</updated>
    <content type="html"><![CDATA[<p>折腾了GHPage之后，就随手在godaddy申请了一个域名，并且绑定了github.io的个人page。</p>
<h3 id="u57DF_u540D_u7533_u8BF7"><a href="#u57DF_u540D_u7533_u8BF7" class="headerlink" title="域名申请"></a>域名申请</h3><ol>
<li>在godaddy上搜索可用的域名。</li>
<li>结账时可以选用优惠码减少使用费。</li>
<li>支付宝支付，方便快捷。</li>
</ol>
<a id="more"></a>
<h3 id="u66F4_u6362_u57DF_u540D_u670D_u52A1_u5668"><a href="#u66F4_u6362_u57DF_u540D_u670D_u52A1_u5668" class="headerlink" title="更换域名服务器"></a>更换域名服务器</h3><ol>
<li>可以选用替换为国内DNSPOD的域名服务器。</li>
<li>设置godaddy域名的域名服务器设置类型为：定制。</li>
<li>F1G1NS1.DNSPOD.NET, F1G1NS2.DNSPOD.NET。</li>
</ol>
<h3 id="u6DFB_u52A0CNAME"><a href="#u6DFB_u52A0CNAME" class="headerlink" title="添加CNAME"></a>添加CNAME</h3><ol>
<li>在你的github.page的repo根目录下添加CNAME文件，内容填写为你的域名. eg: gondole.me 无需www。</li>
</ol>
<h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><ol>
<li>godaddy默认dns对国内不友好，所以可以选择选用国内的DNS，eg：DNSPOD。</li>
<li>直接添加域名解析，DNSPOD会自动导入域名对应的相关信息。</li>
<li>添加一条A类型的主机记录，记录值为你username.github.io的ping对应的ip地址 TTL根据ip变动频率来设定不同的大小，推荐 600。</li>
<li>添加一条CNAME类型的主机路，记录值为username.github.io。</li>
</ol>
<h3 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h3><ol>
<li>因为是个人博客用，所以选用了StartSSL的SSL证书，免费，一年有效期。</li>
<li>目测DNSPOD的CDN需要备案并且不支持HTTPS转发…， 回头换一个DNS。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>折腾了GHPage之后，就随手在godaddy申请了一个域名，并且绑定了github.io的个人page。</p>
<h3 id="u57DF_u540D_u7533_u8BF7"><a href="#u57DF_u540D_u7533_u8BF7" class="headerlink" title="域名申请"></a>域名申请</h3><ol>
<li>在godaddy上搜索可用的域名。</li>
<li>结账时可以选用优惠码减少使用费。</li>
<li>支付宝支付，方便快捷。</li>
</ol>]]>
    
    </summary>
    
      <category term="Godaddy" scheme="http://gondole.github.io/tags/Godaddy/"/>
    
      <category term="域名" scheme="http://gondole.github.io/tags/%E5%9F%9F%E5%90%8D/"/>
    
      <category term="技术" scheme="http://gondole.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android需要关注的一些技术]]></title>
    <link href="http://gondole.github.io/2016/01/25/Android%E9%9C%80%E8%A6%81%E5%85%B3%E6%B3%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%80%E6%9C%AF/"/>
    <id>http://gondole.github.io/2016/01/25/Android需要关注的一些技术/</id>
    <published>2016-01-25T03:59:59.000Z</published>
    <updated>2016-02-26T00:40:01.840Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xqdqt.com1.z0.glb.clouddn.com/2016%2F02%2F26%2F1-XwEpgAyjpF0rGhEdUvm_mQ.jpeg" alt=""></p>
<blockquote>
<ol>
<li>DataBinding</li>
<li>MVP模式</li>
<li>热修复</li>
<li>插件化</li>
<li>RxJava</li>
<li>RxVolley</li>
<li>RxBus, RxBinding</li>
<li>Kotlin语言</li>
</ol>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xqdqt.com1.z0.glb.clouddn.com/2016%2F02%2F26%2F1-XwEpgAyjpF0rGhEdUvm_mQ.jpeg" alt=""></p>
<blockquote>
<ol>
<li>DataBin]]>
    </summary>
    
      <category term="Android" scheme="http://gondole.github.io/tags/Android/"/>
    
      <category term="开源项目" scheme="http://gondole.github.io/tags/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="Android" scheme="http://gondole.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo博客Next主题优化]]></title>
    <link href="http://gondole.github.io/2016/01/22/Hexo%E5%8D%9A%E5%AE%A2Next%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/"/>
    <id>http://gondole.github.io/2016/01/22/Hexo博客Next主题优化/</id>
    <published>2016-01-22T09:16:30.000Z</published>
    <updated>2016-04-19T09:28:12.979Z</updated>
    <content type="html"><![CDATA[<p>目前使用NexT.Pisces主题，优化过程比较零碎，也比较多，在此整理一下。</p>
<h1 id="u83DC_u5355_u8BBE_u7F6E"><a href="#u83DC_u5355_u8BBE_u7F6E" class="headerlink" title="菜单设置"></a>菜单设置</h1><p>NexT主题菜单设置，用于设置博客上方导航栏，在主题配置文件中修改。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">menu:  </span><br><span class="line">  home: /                       #主页  </span><br><span class="line">  categories: /categories		#分类页（需手动创建）  </span><br><span class="line">  #about: /about				#关于页面（需手动创建）  </span><br><span class="line">  archives: /archives			#归档页  </span><br><span class="line">  tags: /tags					#标签页（需手动创建）  </span><br><span class="line">  #commonweal: /404.html        #公益 404 （需手动创建）</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="u6807_u7B7E_u9875_u9762"><a href="#u6807_u7B7E_u9875_u9762" class="headerlink" title="标签页面"></a>标签页面</h2><pre><code>hexo new page &quot;tags&quot;
</code></pre><h2 id="u5206_u7C7B_u9875_u9762"><a href="#u5206_u7C7B_u9875_u9762" class="headerlink" title="分类页面"></a>分类页面</h2><pre><code>hexo new page &quot;categories&quot;
</code></pre><h1 id="u6DFB_u52A0_u535A_u5BA2_u8BBF_u95EE_u91CF_u7EDF_u8BA1"><a href="#u6DFB_u52A0_u535A_u5BA2_u8BBF_u95EE_u91CF_u7EDF_u8BA1" class="headerlink" title="添加博客访问量统计"></a>添加博客访问量统计</h1><p>站点访问计数我使用的是不蒜子，使用非常方便，只需一行脚本+一行标签。（最新版本Next已经内置，可配置）</p>
<h2 id="u663E_u793A_u7AD9_u70B9_u603B_u8BBF_u95EE_u91CF"><a href="#u663E_u793A_u7AD9_u70B9_u603B_u8BBF_u95EE_u91CF" class="headerlink" title="显示站点总访问量"></a>显示站点总访问量</h2><p>我们使用的是hexo，所以要找到网站的布局文件，不同的主题的布局文件可能不一样，下面教程是针对NexT主题做出的修改。</p>
<p>找到站点的themes/next/layout/_partials目录下的footer.swig文件<br>将以下脚本和标签插入到文件中</p>
<pre><code>&lt;script async src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;

本站总访问量 &lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt; &amp;nbsp&amp;nbsp&amp;nbsp
您是第&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;个来到的小伙伴
</code></pre><p>插入到这里</p>
<pre><code>&lt;div class=&quot;powered-by&quot;&gt;
    ...
  &lt;/a&gt;
&lt;/div&gt;

插入到这里


</code></pre><h2 id="u663E_u793A_u6587_u7AE0_u9605_u8BFB_u6B21_u6570"><a href="#u663E_u793A_u6587_u7AE0_u9605_u8BFB_u6B21_u6570" class="headerlink" title="显示文章阅读次数"></a>显示文章阅读次数</h2><p>因为不蒜子只能统计文章详情页面的阅读次数，在主页面是没法显示的，所以后来换成了leanCloud来进行阅读次数的显示。  </p>
<ol>
<li>注册leanCloud，获取到appId和appKey 写入到主题配置文件里。  </li>
<li>因为Next主题已经集成了相关代码，所以直接部署就生效了。</li>
</ol>
<h1 id="u591A_u8BF4_u8BC4_u8BBA"><a href="#u591A_u8BF4_u8BC4_u8BBA" class="headerlink" title="多说评论"></a>多说评论</h1><h2 id="u591A_u8BF4_u521B_u5EFA_u4E2A_u4EBA_u7AD9_u70B9"><a href="#u591A_u8BF4_u521B_u5EFA_u4E2A_u4EBA_u7AD9_u70B9" class="headerlink" title="多说创建个人站点"></a>多说创建个人站点</h2><p>在多说注册并且创建站点并且可以进行相关设置比如默认头像以及自定义CSS评论框样式。</p>
<h2 id="u4FEE_u6539_u7AD9_u70B9_u914D_u7F6E_u6587_u4EF6"><a href="#u4FEE_u6539_u7AD9_u70B9_u914D_u7F6E_u6587_u4EF6" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h2><p>在站点配置文件中增加duoshuo_shortname字段，duoshuo_shortname就是上一步中你填写的值。</p>
<pre><code>duoshuo_shortname: your_duoshuo_name
</code></pre><h2 id="u53BB_u9664_u6807_u7B7E_u9875_u8BC4_u8BBA"><a href="#u53BB_u9664_u6807_u7B7E_u9875_u8BC4_u8BBA" class="headerlink" title="去除标签页评论"></a>去除标签页评论</h2><pre><code>title: categories
date: 2015-09-18 21:46:42
type: &quot;categories&quot;
comments: false   #去除多说评论框
</code></pre><h2 id="u628A_u591A_u8BF4_u8BC4_u8BBA_u4F9D_u8D56_u7684embed-js_u653E_u7F6E_u5E95_u90E8"><a href="#u628A_u591A_u8BF4_u8BC4_u8BBA_u4F9D_u8D56_u7684embed-js_u653E_u7F6E_u5E95_u90E8" class="headerlink" title="把多说评论依赖的embed.js放置底部"></a>把多说评论依赖的embed.js放置底部</h2><p>Yahoo性能中心总结的高性能网站设计的规则提及，把Javascript脚本尽量放到页面底部加载，这里不多说。<br>wordpress多说插件提供了在网页底部插入多说核心脚本embed.js这选项供用户选择，比较人性化。其他博客程序的话可以把embed.js放置到主题的footer底部加载。这里以hexo静态博客程序，NexT.Mist主题举个栗子，这里需要修改的文件是duoshuo.swig，路径是your-hexo-site\themes\next\layout_scripts目录下，将下面一段代码</p>
<pre><code>(document.getElementsByTagName(&apos;head&apos;)[0]
</code></pre><p>修改成下面的代码</p>
<pre><code>(document.getElementById(&apos;footer&apos;)
</code></pre><h1 id="u6DFB_u52A0_Swiftype__u641C_u7D22"><a href="#u6DFB_u52A0_Swiftype__u641C_u7D22" class="headerlink" title="添加 Swiftype 搜索"></a>添加 Swiftype 搜索</h1><p>按照next的github上的教程配置了半天没生效…， 后来网上搜索到了新版本Swiftype Search的配置方法，注册 Swiftype 后 在安装配置时，复制你的code  </p>
<pre><code>_st(&apos;install&apos;,&apos;xxxxxxxxxxxxx&apos;,&apos;2.0.0&apos;);
</code></pre><p>其中 <strong>xxxxxxxxxxxxx</strong> 为你的swiftypeKey，然后在站点配置文件_config.yml中添加：</p>
<pre><code>swiftype_key: xxxxxxxxxxxxx
</code></pre><p>另外需要注意的是，在进入搜索框 <strong>(search field)</strong> 一项时，主意将搜索框的ID改成NexT主题搜索框的ID <strong>#st-search-input</strong>，TYPE修改为 <strong>elementID</strong>，最后进入(<strong>activate</strong>)这一项，点击右下角的<strong>ACTIVATE SWIFTYPE</strong>按钮即可完成swiftype的所有配置了。</p>
<h1 id="Google_u5B57_u4F53_u5E93_u4F18_u5316"><a href="#Google_u5B57_u4F53_u5E93_u4F18_u5316" class="headerlink" title="Google字体库优化"></a>Google字体库优化</h1><p>由于国内偶尔访问谷歌字体库非常慢，故使用360CDN替换, themes\next\layout_partials\head.swig</p>
<p>将：</p>
<pre><code>&lt;link href=&quot;//fonts.googleapis.com/css?family=Lato:300,400,700,400italic&amp;subset=latin,latin-ext&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;
</code></pre><p>替换为：</p>
<pre><code>&lt;link href=&quot;//fonts.useso.com/css?family=Lato:300,400,700,400italic&amp;subset=latin,latin-ext&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>目前使用NexT.Pisces主题，优化过程比较零碎，也比较多，在此整理一下。</p>
<h1 id="u83DC_u5355_u8BBE_u7F6E"><a href="#u83DC_u5355_u8BBE_u7F6E" class="headerlink" title="菜单设置"></a>菜单设置</h1><p>NexT主题菜单设置，用于设置博客上方导航栏，在主题配置文件中修改。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">menu:  </span><br><span class="line">  home: /                       #主页  </span><br><span class="line">  categories: /categories		#分类页（需手动创建）  </span><br><span class="line">  #about: /about				#关于页面（需手动创建）  </span><br><span class="line">  archives: /archives			#归档页  </span><br><span class="line">  tags: /tags					#标签页（需手动创建）  </span><br><span class="line">  #commonweal: /404.html        #公益 404 （需手动创建）</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://gondole.github.io/tags/hexo/"/>
    
      <category term="hexo" scheme="http://gondole.github.io/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo博客的多设备同步]]></title>
    <link href="http://gondole.github.io/2016/01/22/Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%A4%9A%E8%AE%BE%E5%A4%87%E5%90%8C%E6%AD%A5/"/>
    <id>http://gondole.github.io/2016/01/22/Hexo博客的多设备同步/</id>
    <published>2016-01-22T06:32:35.000Z</published>
    <updated>2016-01-29T08:30:03.852Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xqdqt.com1.z0.glb.clouddn.com/2016%2F01%2F27%2F24hrPQn.jpg" alt="流逝"></p>
<p>在公司搭建了两天hexo博客，主题各种配置，发了几篇文章，回到家里想继续搞时发现搞不了…， GitHub上面存放的是hexo根据md生成的网页文件，于是搜索了一下怎么样在多设备上操作hexo博客，在公司弄完回家接着弄啊得。今天看到一种方法，试验了下，大概走通了，记录一下。</p>
<p>博客的源文件主要在source文件夹里，所以需要把这个文件夹同步到云端，这里选择使用GitHub仓库来备份source文件夹。</p>
<a id="more"></a>
<h1 id="u5907_u4EFD_hexo/source"><a href="#u5907_u4EFD_hexo/source" class="headerlink" title="备份 hexo/source"></a>备份 hexo/source</h1><p>在你的Github里新建一个仓库，eg：hexoSource，创建完毕后在电脑上切换到你的hexo的source目录，执行如下命令进行上传：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   git init	#初始化同步目录</span><br><span class="line">git remote add origin git@github.com:username/hexoSource.git</span><br><span class="line">git add .</span><br><span class="line">git commit -m "init hexo source "</span><br><span class="line">git pull origin master		#同步远程仓库文件</span><br><span class="line">git push -u origin master	#push到远程仓库</span><br></pre></td></tr></table></figure>
<p>这样本地的source文件夹就备份到github上了，另外hexo下的_config.yml和theme下的主题（可能自定义配置的比较多）可以备份到网盘上面，在另外一台电脑上初始化好hexo之后可以直接覆盖。</p>
<h1 id="u6062_u590D_hexo/source"><a href="#u6062_u590D_hexo/source" class="headerlink" title="恢复 hexo/source"></a>恢复 hexo/source</h1><p>在另外一台电脑上，首选按照搭建hexo博客的正常流程来进行各种配置：</p>
<ol>
<li>安装 Node.js</li>
<li>安装 Git</li>
<li>安装 Hexo</li>
</ol>
<p>最后执行完hexo初始化命令后，本地hexo文件夹下会有正常的source文件，此时切换到该目录，进行github上source备份文件的关联恢复，clone远程source仓库文件到本地</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone username<span class="annotation">@host</span>:/path/to/repository</span><br></pre></td></tr></table></figure>
<p>clone完之后备份的远程source文件就到本地了，并且和git做了关联，接着就可以正常编辑博客文件了以及正常部署，记得下班时同步本地source文件到github上喔：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xqdqt.com1.z0.glb.clouddn.com/2016%2F01%2F27%2F24hrPQn.jpg" alt="流逝"></p>
<p>在公司搭建了两天hexo博客，主题各种配置，发了几篇文章，回到家里想继续搞时发现搞不了…， GitHub上面存放的是hexo根据md生成的网页文件，于是搜索了一下怎么样在多设备上操作hexo博客，在公司弄完回家接着弄啊得。今天看到一种方法，试验了下，大概走通了，记录一下。</p>
<p>博客的源文件主要在source文件夹里，所以需要把这个文件夹同步到云端，这里选择使用GitHub仓库来备份source文件夹。</p>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://gondole.github.io/tags/hexo/"/>
    
      <category term="hexo" scheme="http://gondole.github.io/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo搭建GitHub博客]]></title>
    <link href="http://gondole.github.io/2016/01/21/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2/"/>
    <id>http://gondole.github.io/2016/01/21/Hexo搭建GitHub博客/</id>
    <published>2016-01-21T08:29:12.000Z</published>
    <updated>2016-04-08T09:58:15.196Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xqdqt.com1.z0.glb.clouddn.com/2016%2F03%2F24%2Fhexo.png" alt=""></p>
<p>之前在csdn有一个博客，不过也没有写起来，只是当作一个在线笔记本来使用，记录收藏一些开发相关的知识。大概一年前看到一个网站，感觉网站样式很清爽简洁，看到下方有hexo强力驱动时才发现hexo这个玩意，但是放下没去了解，这两天心血来潮决定好好整整，简单按照网上的教程一步一步搭建了这个githubPage，这里也大概记录一下步骤吧，毕竟脑袋不如烂笔头好使……</p>
<a id="more"></a>
<h1 id="u73AF_u5883_u51C6_u5907"><a href="#u73AF_u5883_u51C6_u5907" class="headerlink" title="环境准备"></a>环境准备</h1><ul>
<li><p>Node 安装: 在Node.js官网下载相应平台的最新版本，一路安装即可。</p>
</li>
<li><p>Git 安装: 可以选用msysgit，谷歌搜索至git官网，下载安装，设置环境变量以便全局使用, GIT_HOME, %GIT_HOME%\bin。</p>
</li>
<li><p>Sublime:支持MarkDown语法的强大编辑器，支持很多编程语言，支持语法高亮等很多特性。</p>
</li>
</ul>
<h1 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h1><ul>
<li>首先需要一个帐号</li>
<li>建立一个与你用户名响应的仓库，仓库名为 your_user_name.github.com</li>
<li>添加SSH公钥到Account settings -&gt; SSH Keys -&gt; Add SSH Key</li>
</ul>
<p>如何添加SSH Key ?</p>
<p>首先设置用户名和密码：  </p>
<pre><code>git config --global user.email &quot;你的github帐号&quot;
git config --global user.name &quot;你的github用户名&quot;  
</code></pre><p>生成密钥：  </p>
<pre><code>ssh-keygen -t rsa -C &quot;github用户名&quot;  
</code></pre><p>默认会在c盘.ssh文件夹下生成两个文件 id_rsa和id_rsa.pub，打开id_rsa.pub，拷贝其中的内容添加到Add SSH Key。</p>
<p>最后验证：</p>
<pre><code>ssh -T git@github.com
</code></pre><p>验证时出现了一个问题：连接超时，22端口被禁用，于是更换ssh_config文件内容为：</p>
<pre><code>Host github.com  
Hostname ssh.github.com  
Port 443
</code></pre><h1 id="Hexo_u5B89_u88C5"><a href="#Hexo_u5B89_u88C5" class="headerlink" title="Hexo安装"></a>Hexo安装</h1><p>此时Node和Git都已经安装完毕，ssh也已经关联上，执行如下命令安装hexo：</p>
<pre><code>npm install -g hexo
</code></pre><h2 id="u521D_u59CB_u5316"><a href="#u521D_u59CB_u5316" class="headerlink" title="初始化"></a>初始化</h2><p>可以新建一个文件夹 eg：hexo，在此文件夹下执行命令：</p>
<pre><code>hexo init
</code></pre><p>将hexo初始化到该目录，到此时，安装工作执行完毕。</p>
<h2 id="Hexo_u4F7F_u7528"><a href="#Hexo_u4F7F_u7528" class="headerlink" title="Hexo使用"></a>Hexo使用</h2><h2 id="u751F_u6210_u9759_u6001_u9875_u9762"><a href="#u751F_u6210_u9759_u6001_u9875_u9762" class="headerlink" title="生成静态页面"></a>生成静态页面</h2><p>cd到init初始化目录，执行如下命令，生成静态页面到hexo\public目录。</p>
<pre><code>hexo generate
</code></pre><p>或则缩写</p>
<pre><code>hexo g
</code></pre><h2 id="u5199_u6587_u7AE0"><a href="#u5199_u6587_u7AE0" class="headerlink" title="写文章"></a>写文章</h2><pre><code>hexo new &quot;postName&quot; #新建文章
</code></pre><p>此时会在source下_posts文件夹下生成postName.md文件，打开即可进行编辑。</p>
<h2 id="u90E8_u7F72"><a href="#u90E8_u7F72" class="headerlink" title="部署"></a>部署</h2><pre><code>hexo deploy
</code></pre><p>或则缩写</p>
<pre><code>hexo d
</code></pre><p>有时会提示警告：ERROR Deployer not found: git<br>执行如下命令就可以安装deploy</p>
<pre><code>npm install hexo-deployer-git --save
</code></pre><p>此时打开username.github.com 即可预览你的站点啦。</p>
<h1 id="u4E3B_u9898_u5B89_u88C5"><a href="#u4E3B_u9898_u5B89_u88C5" class="headerlink" title="主题安装"></a>主题安装</h1><pre><code>git clone https://github.com/iissnan/hexo-theme-next.git themes/next
</code></pre><p>主题会克隆到themes下，打开hexo下的_config.yml，修改主题为next即可。</p>
<pre><code>theme: next
</code></pre><p>更新主题</p>
<pre><code>cd themes/next
git pull
</code></pre><h1 id="u5206_u9875_u63D2_u4EF6"><a href="#u5206_u9875_u63D2_u4EF6" class="headerlink" title="分页插件"></a>分页插件</h1><p>在blog目录下的_config.yml站点配置文件末尾添加以下内容以设置分页参数</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Plugins</span><br><span class="line">index_generator:</span><br><span class="line">  per_page: 10 ##首页默认10篇文章标题，如果值为0不分页</span><br><span class="line"></span><br><span class="line">archive_generator:</span><br><span class="line">  per_page: 10 ##归档页面默认10篇文章标题，如果值为0不分页</span><br><span class="line">  yearly: true ##生成年视图</span><br><span class="line">  monthly: true ##生成月视图</span><br><span class="line"></span><br><span class="line">tag_generator:</span><br><span class="line">  per_page: 10 ##标签页面默认10篇文章，如果值为0不分页</span><br><span class="line"></span><br><span class="line">category_generator: </span><br><span class="line">  per_page: 10 ##分类页面默认10篇文章，如果值为0不分页</span><br></pre></td></tr></table></figure>
<h1 id="u6DFB_u52A0RSS"><a href="#u6DFB_u52A0RSS" class="headerlink" title="添加RSS"></a>添加RSS</h1><p>添加feed插件，一定记得加–save</p>
<pre><code>npm install hexo-generator-feed --save
</code></pre><p>插件安装完成后 在站点配置文件_config.yml 里添加  </p>
<pre><code>plugins:  
    - hexo-generator-feed
</code></pre><p>在主题配置文件里添加  </p>
<pre><code>rss: /atom.xml
</code></pre><p>然后在执行 hexo g时就可以自动生成atom.xml文件了。</p>
<h1 id="u6DFB_u52A0sitemap"><a href="#u6DFB_u52A0sitemap" class="headerlink" title="添加sitemap"></a>添加sitemap</h1><p>添加sitemap插件</p>
<pre><code>npm install hexo-generator-sitemap
</code></pre><p>开启sitemap功能：编辑hexo/_config.yml，添加如下代码：</p>
<pre><code>plugins:
    - hexo-generator-sitemap
</code></pre><p>访问username/sitemap.xml即可看到站点地图。不过，sitemap的初衷是给搜索引擎看的，为了提高搜索引擎对自己站点的收录效果，我们最好手动到google和百度等搜索引擎提交sitemap.xml。</p>
<h1 id="gulp_u63D2_u4EF6_u538B_u7F29"><a href="#gulp_u63D2_u4EF6_u538B_u7F29" class="headerlink" title="gulp插件压缩"></a>gulp插件压缩</h1><p>部署之前压缩生成的html文件，可以提高网页的加载速度。</p>
<h2 id="u5B89_u88C5gulp_u76F8_u5173_u63D2_u4EF6"><a href="#u5B89_u88C5gulp_u76F8_u5173_u63D2_u4EF6" class="headerlink" title="安装gulp相关插件"></a>安装gulp相关插件</h2><pre><code>npm install gulp -g  
npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean --save
</code></pre><h2 id="u6267_u884C_gulp__u4EFB_u52A1"><a href="#u6267_u884C_gulp__u4EFB_u52A1" class="headerlink" title="执行 gulp 任务"></a>执行 gulp 任务</h2><p>安装完 gulp 插件后，需要在 package.json 同级目录下，新建 gulpfile.js。  </p>
<p>文件保存后，当我们执行 hexo g &amp;&amp; gulp 时，gulp 会根据 gulpfile.js 中的配置，对 public 目录中的静态资源文件进行压缩。压缩完成后执行 hexo d 部署到 github / vps 中即可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xqdqt.com1.z0.glb.clouddn.com/2016%2F03%2F24%2Fhexo.png" alt=""></p>
<p>之前在csdn有一个博客，不过也没有写起来，只是当作一个在线笔记本来使用，记录收藏一些开发相关的知识。大概一年前看到一个网站，感觉网站样式很清爽简洁，看到下方有hexo强力驱动时才发现hexo这个玩意，但是放下没去了解，这两天心血来潮决定好好整整，简单按照网上的教程一步一步搭建了这个githubPage，这里也大概记录一下步骤吧，毕竟脑袋不如烂笔头好使……</p>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://gondole.github.io/tags/hexo/"/>
    
      <category term="hexo" scheme="http://gondole.github.io/categories/hexo/"/>
    
  </entry>
  
</feed>
